= Building an End-to-End ETL Application with Python

http://rowanv.com

Author: @rowanrv



== Overview
* What will we go over?
* Who is this talk for?
* Talk and all slides at my github: github.com/rowanv/etl_tutorial

== About Me

* Rowan V
* B.S. from MIT
* Past: Twitter, Inter-American Development Bank, startups
* http://rowanv.com
* Freelance Data Developer
* Interested in hiring me? rowan [at] horossolutions [dot] com

== What is ETL?
* Process for working with data.
* Extract. Often from heterogeneous sources
* Transform. Change format, for analysis, etc. Application of some algorithm.
* Load. Load to our final target -- usually some type of data warehouse solution.

== Why do we need ETL systems?
* Messy
* Heterogenous sources
* Surface data for non-dev types
* Create final data products

== Data science!
* Data science vs. statistics

== Challenges
* Testing
* Data transformations among heterogeneous systems
* Big data! Hadoop?
* Useability vs. generalizability

== Let's build our app!
* Flask in 30 sec.
* Microframework. Jinja2.
* Flask is Fun! flask.pocoo.org
* route() decorators map URLs to functions

== Let's build our app!
Your task (should you choose to accept it): Build an app that calculates
the coldest and warmest European capital, right now.

== Let's build our app!

[source,python]
----
from flask import Flask
app = Flask(__name__)

@app.route('/')
def hello_world():
    return 'Hello World!'

if __name__ == '__main__':
    app.run()
----

[source, bash]
$python run.py
* Running on http://127.0.0.1:5000/

== Extract
* Open weather map API
* Extract with json library, return a pandas dataframe

== Transform
* Pandas in 30 sec
* DataFrame: tabular structure -- like a dict for Series
* Easy loading, transformations, selections

== Transform
* df.ix()  -- selection by label, multi-axis indexing.

[source, python]
----
import pandas as pd
import numpy as np
dates = pd.date_range('1/1/2000', periods=8)
df = pd.DataFrame(np.random.randn(8, 4), index=dates, columns=['A', 'B', 'C', 'D'])
df['A'] #selection by row
df.ix['2000-01-01', 'A'] #selection by column and row
----
== Transform

* How would I select column C, January 6th 2000?
[source, python]
----
import pandas as pd
import numpy as np
dates = pd.date_range('1/1/2000', periods=8)
df = pd.DataFrame(np.random.randn(8, 4), index=dates, columns=['A', 'B', 'C', 'D'])
----

== Transform
* Selecting a max: argmax() and argmin() will return the row that
contains the largest or smallest value.

== Transform
* We realize that we've pulled our temperature in degrees Kelvin.
* Let's convert to Celsius!
* Then, let's write a function that returns the max temp, given our df with the list of European cities.

== Load
* We can visualize, but we could just as easily be writing to a DB
* Display our results via a web app.
* Write a home page view that welcomes users to the app and lets them click on a button that
will take them to '/warmest_city/'

== Load
* Write a warmest_city() view that calls our fetch_weather, transform, and get_max_weather functions,
and shows the user the name of the city and city temperature for the warmest city.

== Load
* Do the same for the cold weather city!

== Making things pretty/awesome
* Refactoring
* Tests!
* Bootstrap

== But I want to deploy this!
* Yay!
* Change out your development server for something production-ready.
* nginx
* gunicorn

